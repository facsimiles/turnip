======
turnip
======

turnip is a flexible and scalable Git server suite written in Python
using Twisted.

The various servers provide customisable virtual hosting, with flexible
authentication and authorisation, and individual horizontal scaling from
the frontend to the storage layer.

None of the Python interfaces here should be considered stable.


Architecture
============

turnip's architecture is designed to maximise simplicity, scalability
and robustness. Each server provides roughly one service, and an
installation need only run the servers that it desires. Most servers
eschew local state to ease horizontal scaling, and those that do have
local state can replicate and/or shard it.

There are two separate server stacks: pack and API. The pack stack
communicates with Git clients via the pack protocol (git://), smart
HTTP, or smart SSH. The HTTP and SSH frontends unwrap the tunneled pack
protocol, and forward it onto the midends as a normal pack protocol
connection. The separate HTTP API stack provides a programmatic remote
interface to high-level read and write operations on the repositories


Frontends:
 * Pack
 * Smart HTTP
 * Smart SSH
 * HTTP API

Midends:
 * Pack virtualisation
 * API virtualisation

Backends:
 * Pack
 * API


Internal protocol
=================

turnip uses an extension of the Git pack protocol for most communication
between its servers. The only change is that turnip requests can specify
arbitrary named parameters, not just a hostname.

The relevant part of the Git pack protocol's git-proto-request is
represented in ABNF as follows::

   git-proto-request = request-command SP pathname NUL [ host-parameter NUL ]
   host-parameter = "host=" hostname [ ":" port ]

turnip-proto-request alters it to this::

   turnip-proto-request = request-command SP pathname NUL \*( param NUL )
   param = param-name "=" param-value
   param-name = \*( %x01-3C / %x3E-FF ) ; exclude NUL and =
   param-value = \*%x01-FF ; exclude NUL

The only additional parameters implemented today are
'turnip-stateless-rpc' and 'turnip-advertise-refs', which are used by
the smart HTTP server to proxy to the standard pack protocol.

turnip implements one externally-visible extension: a
'turnip-set-symbolic-ref' service that sets a symbolic ref (currently only
'HEAD' is permitted) to a given target. This may be used over the various
protocols (git, SSH, smart HTTP), requesting the service in the same way as
the existing 'git-upload-pack' and 'git-receive-pack' services.

   turnip-set-symbolic-ref-request = set-symbolic-ref-line
                                     flush-pkt
   set-symbolic-ref-line           = PKT-LINE(refname SP refname)

The server replies with an ACK indicating the symbolic ref name that was
changed, or an error message.

   turnip-set-symbolic-ref-response = set-symbolic-ref-ack / error-line
   set-symbolic-ref-ack             = PKT-LINE("ACK" SP refname LF)


Development
===========

Setup
-----

Create a trusty container (optional)::

       sudo lxc-create -t ubuntu -n turnip.trusty -- -r trusty -a amd64 -b $USER

Run the following::

        sudo add-apt-repository ppa:launchpad/ppa
        sudo apt-get update
        cat system-dependencies.txt | sudo xargs apt-get install -y --no-install-recommends


Running
-------

Pack smart-http/ssh services can be started with:

    python turnipserver.py

The HTTP API can be started with:

   make run-api                  


Deployment
==========

Turnip is deployed with the turnip juju charm, available from:

   git clone https://git.launchpad.net/~canonical-launchpad-branches/charms/+source/turnip

To deploy with the local provider:

   juju switch local
   juju bootstrap
   juju deploy --repository=/path/to/loca/charm/repo/root local:trusty/turnip
